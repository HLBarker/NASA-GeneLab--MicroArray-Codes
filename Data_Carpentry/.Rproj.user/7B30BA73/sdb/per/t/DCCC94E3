{
    "contents" : "## comments are useful \n## like basic arithmetic\n4+6\n4*6\n4^6\n4/6\nsqrt(46)\nlog(46)\nlog10(46)\nlog(46, 10)\n\n## this sign <- causes creates a new object\nage <- 2016 - 1969\n## then you can use the object for further claculation\nsqrt_age <- sqrt(age)\nsqrt_age \nsqrt(age)\n\n##Vectors\n## Note: don't use C as a variable name as it also functions as a \"combine\" or concatinate functions\nweights <- c(30, 100, 4000, 8000)\nlength(weights)\nanimals <-c(\"rat\", \"cats\")\n## you can add on to a vetor using <- c\nanimals <-c (\"mouse\", animals)\n\n## what type or class of information is contained within a vector\nclass(animals)\nclass(weights)\n\n## animals = text\n## weights = numeric\n## note: you can't mix vector types like this...\nx<- c (1,2,3, 'a')\ny<- c (1,2,3, TRUE)\nz<- c ('a', TRUE, 'b', 'c')\ntricky <- c(1, '2', 3, 4)\n\n## this tells you about the data structure\nstr(weights)\nstr(animals) \n\n## this tells you what variables you have...\nls() ## list\nrm() ## remove\n\n## indexing / subsetting\nweights\nweights[1]\nweights[2]\nweights[c(2,3)]\n\nanimals [c(1,2,3,1,2,4)]\nanimals <- c(\"mouse\", \"rat\", \"dog\", \"cat\")\n\n## calculations to the whole vector\n-weights\nweights*2.2/1000\nsqrt(weights)\nlog10(weights)\nweights\nsave_these <- c(TRUE,FALSE, FALSE, FALSE, FALSE)\nweights[save_these]\n\nweights [weights <50]\nanimals [weights <1000]\nanimals [weights >1000]\nanimals [weights >50 & weights <5000]\nweights[animals %in% c(\"rats\", \"cats\")]\n\n## missing values\nheights <- c(2, 4, 4, NA, 6)\n## note: missing values cause basic calculations to fail\nmean(heaights)\nmax(heaights)\n## thus\nmean(heights, na.rm=TRUE)\nmax(heights, na.rm=TRUE)\nna.omit(heights)\n\n##Note: if you put NA in \"NA\" then it creates a different type of vector\nv <- c(2, 4, 4, \"NA\", 6)\nv\nmean (v)\nmean (v, na.rm=TRUE)\nna.omit (v)\n# make sure you don't have \"NA\" in your codes?...\n\n## Note: ! means do the opposit\n\n## load the data from the url \"http://kbroman.org/datacarp/portal_data_joined.csv\"\nurl <- \"http://kbroman.org/datacarp/portal_data_joined.csv\"\nfilename <- \"portal_data_joined.csv\"\ndownload.file(url, filename)\nsurveys <- read.csv (\"portal_data_joined.csv\")\n\n## or \ndownload.file(\"http://kbroman.org/datacarp/portal_data_joined.csv\", \"portal_data_joined.csv\")\nsurveys <- read.csv (\"portal_data_joined.csv\")E\n## note: read.csv makes every column as a factor\n\n## this makes strings of numbers instead of factors\nsurveys <- read.csv (\"portal_data_joined.csv\" stringsAsFactors=HELLNO) \n\n## new data... start with STR and head\nhead(surveys)\nhead(surveys, 2)\ntail (surveys)\ntail (surveys, 3)\nncol(surveys) # columns\nnrow(surveys) # rows\nsummary(surveys) # this might be a really interesting summary! \nnames(surveys) # column names\nrownames(surveys) # row names\ndim(surveys)\nsex <- factor( c(\"male\", \"female\"))\nsex\nclass(sex)\nlevels (sex)\nnlevels(sex)\nsex_char <- as.character(sex)\nsex_char\n\nnumbers <- factor(c(\"1\",\"5\",\"8\",\"4\"))\nlevels (numbers)\nas.numeric(as.character(numbers))\nexpt <- c(\"treat1\", \"treat2\", \"treat1\", \"treat1\", \"treat3\", \"treat1\", \"control\", \"treat1\",\"treat2\", \"treat3\")\n## note: in cases like this just write t1, t2, t3, control\n\nexpt <- factor (expt)\ntable(expt)\nlevels(expt)\n\n## Indexing of data frames\nsurveys[1,1]\nsurveys[4,7]\n\n###These all do the same thing...\nsex <- surveys[,\"sex\"]\nsex <- surveys$sex\nsex\n\n## sequences, : and seq\n5:10\n1:10\nseq (5, 10, by=2)\nseq (5, 10, by=0.5)\nseq (5, 10, length.out=26)\n\n## slices of a data frame\nsurveys [10:20, 2:4]\nsurveys [10:20, 2:5]\n\nmale_weights <-surveys[surveys$sex ==\"M\", \"weights\"]\nmale_weights <-surveys$weight[surveys$sex==\"M\"]\nmale_weights\nmean(male_weights, na.rm=TRUE) ### mean male weight\n\n###Useful packages \ninstall.packages(\"dplyr\")\ninstall.packages(\"ggpolot2\")\nlibrary(dplyr)\n\nDplyr aims to provide a function for each basic verb of data manipulation:\n  \n##  https://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html  \nfilter() (and slice())\narrange()\nselect() (and rename())\ndistinct()\nmutate() (and transmute())\nsummarise()\nsample_n() and sample_frac()\n\n\nselected_col <- select(surveys, species_id, sex)\nfilter (surveys, sex==\"M\")\n\n###pipe\n== ## means compare\nlibrary(\"dplyr\")\n\n#dplyr   SQL\n#select  SELECT\n#filter  WHERE\n#mutate \n#group_by GROUP BY\n#summarize\n#arrange  ORDER BY  \n#tally\n\n#%>% (cmd+shift+M)\n#AND\nsurveys %>% filter(sex==\"M\",weight < 10) %>%  select(species_id,sex) \n#OR\nsurveys %>% filter(sex==\"M\" | weight < 10) %>%  select(species_id,sex)\n\n#Challenge answer\nsurveys %>% filter(year < 1995) %>% select(year, sex, weight)\nsurveys %>% mutate(sqrt_weight=sqrt(weight)) %>% head\nsurveys %>% filter (!is.na(weight)) %>% mutate(sqrt_weight=sqrt(weight), weight=weight*2.2)\n\n###These both failed\nhead(select(filter(surveys, weights<6), species_id, weights))\nfiltered <- filter(surveys, weights<6)\n\n## Failed...\nchallenge_results <- surveys %>% mutate(hindfoot_sqrt = sqrt(hindfoot_length)) %>% filter(!is.na(hindfoot_sqrt), hindfoot_sqrt < 3) %>% select (species_id, hindfoot_sqrt)\n\n## arrange \nchallenge_results %>% arrange (hindfoot_sqrt)\nchallenge_results %>% arrange (desc(hindfoot_sqrt),species_id)\n## desc = decending\n\n## group by\nsurveys %>% group_by(sex) %>% tally\nsurveys %>% group_by(sex, year) %>% tally\n\nsurveys %>% group_by(sex) %>% summarize(mean_weight=mean(weight, na.rm=TRUE))\n##alternatively\nsurveys %>% group_by(sex) %>% filter(!is.na(weights)) %>% summarize(mean_weights=mean(weights)) ,min_weight=min(weights),max_weight=max(weights))\n\n## some data cleaning\nsurveys_complete <- surveys %>% filter(!is.na(hindfoot_length))%>% filter (!is.na(weight)) %>% filter (sex != \"\")\n# count species\ncount_species <- surveys_complete %>% group_by (species_id) %>% tally\n# species with >= 10 count\nfrequent_species <- count_species %>% filter (n>=10)\n\n#save just rows with species_id count >= 10\nsurveys_complete <-surveys_complete %>% filter (species_id %>% frequent_species$speciess_id)\n\n###ggplot graph creation\n##Note: this changes the graphs from a grey theme to a black and white one...\nXXXYYYZZZ code + theme_bw()\n### aes = asethetics = tells the software which column or vector should be on the X or Y axis... \n## Note the + operator allows you to add extra functions to the graph\nsurveys_complete %>% ggplot(aes(x=weight, y=hindfoot_length)) + geom_point ()\n## this can be brocken down...\np1 <-surveys_complete %>% ggplot(aes(x=weight, y=hindfoot_length))\np2 <- p1 + geom_point() \np2\np2 + scale_x_log10()\np2 + scale_x_sqrt()\n\np3 <-surveys_complete %>% ggplot(aes(x=species_id, y=hindfoot_length))\np4 <- p3 + geom_point()\np4\n\n###Contains filter and error\nsurveys_complete %>% filter (species_id==\"DM\") %>%\n  ggplot (aes((x=weight, y=hindfoot_length)) \n          + geom_point()\n   \n### other aesthetics : size, color, alpha, shape\ngenom_point(alpha=0.1, color=\"slateblue\", size=20)\n\n## this assigns colors to specific species\ngenom_point(aes(color=species_id))\n \n## This one works                                                        \nsurveys_complete %>% \nfilter(species_id %in% c(\"DM\", \"DS\", \"DO\")) %>%\nggplot (aes(x=weight, y=hindfoot_length)) +\ngeom_point(aes(color=species_id, shape=species_id))                                                           \n\n## this one works...!!\nsurveys_complete %>% group_by(year) %>% tally %>%\n               ggplot (aes(x=year, y=n)) +\n               geom_line(color=\"lightblue\") +\n               geom_point(color=\"violetred\", size = 2)  \n                                                                                                                            \n\n### \nsurveys_complete %>% filter (species_id %in% c(\"DM\", \"DS\")) %>%\n            group_by(year, species_id) %>%\n            tally %>%\n            ggplot (aes(x=year, y=n)) +\n            geom_point(aes(color=species_id)) +\n            geom_line(aes(color=species_id))\n\n## histogram\nsurveys_complete %>% ggplot (aes(x=weight)) +\n  geom_histogram(bins=100) \n\n### box plot\nsurveys_complete %>% \n  ggplot (aes(x=species_id, y=weight)) +\n  geom_boxplot () \n\n### box plot with dots on top.\nsurveys_complete %>% \n  ggplot (aes(x=species_id, y=weight)) +\n  geom_boxplot () + geom_jitter(col=\"Orchid\", alpha=0.1)\n\n#### faceting, this makes each \"species\" its own graphical pannel\nsurveys_complete %>%\n  group_by(year, species_id) %>%\n  tally %>% ggplot(aes(x=year, y=n)) +\n  geom_line() + facet_wrap (~ species_id)\n\nsurveys_complete %>%\n  ggplot (aes(x=weight, y=hindfoot_length)) +\n  geom_point (aes(color=species_id))\n\nsurveys_complete %>%\n  ggplot (aes(x=weight, y=hindfoot_length)) +\n  geom_point (aes(color=species_id)) + facet_wrap(~ year)\n\nsurveys_complete %>% filter (species_id %in% c(\"DM\", \"DS\")) %>%\n  ggplot (aes(x=weight, y=hindfoot_length)) +\n  geom_point (aes(color=species_id)) + facet_wrap(~ species_id)\n\nsurveys_complete %>% filter (species_id %in% c(\"DM\", \"DS\")) %>%\n  ggplot (aes(x=weight, y=hindfoot_length)) +\n  geom_point (aes(color=species_id)) + facet_wrap(species_id ~year)\n\n#### R mark down = Literate programming = Go to File -> new file ",
    "created" : 1464886164847.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "618561761",
    "id" : "DCCC94E3",
    "lastKnownWriteTime" : 1465076463,
    "path" : "~/Google Drive/R & Stats/Data_Carpentry/Data_carpentry.R",
    "project_path" : "Data_carpentry.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}