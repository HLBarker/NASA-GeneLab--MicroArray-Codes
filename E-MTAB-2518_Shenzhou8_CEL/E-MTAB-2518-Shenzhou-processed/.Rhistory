?fitPLM
library("affy")
library("limma")
library("oligo")
library("affyPLM")
library("annotate")
library("dplyr")
library("GO.db")
library("ggplot2")
library("ggrepel")
?fitPLM
setwd("C:/Users/richardbarker/Google Drive/R_&_Stats/Raw_microarray_data/E-MTAB-2518_Shenzhou8_CEL/E-MTAB-2518.raw.1")
data <- ReadAffy()
sampleNames(data)
AEsetnorm <- affy::rma(data)
length(sampleNames(data))
for (i in 1:length(sampleNames(data)))
{name = paste("MAplotnorm",i,".jpg",sep="")
jpeg(name)
oligo::MAplot(AEsetnorm,which=i)
dev.off()}
targets <- read.csv(file="targets.csv", stringsAsFactors=FALSE)
targets
data.ground <- data[,c(5,6)]
sampleNames(data.ground) = targets$Name[c(5,6)]
?sampleNames
data.flight<- data[,c(1,2)]
sampleNames(data.flight) = targets$Name[c(1,2)]
data.1G_flight<- data[,c(3,4)]
sampleNames(data.1G_flight) = targets$Name[c(3,4)]
data.ground.PLM <- fitPLM(data.ground)
data.flight.PLM <- fitPLM(data.flight)
data.1G_flight.PLM <- fitPLM(data.1G_flight)
RNAdeg <- AffyRNAdeg(data.ground)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data.ground),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNAdeg <- AffyRNAdeg(data.flight)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data.flight),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNAdeg <- AffyRNAdeg(data.1G_flight)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data.1G_flight),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNADegSummary <- summaryAffyRNAdeg(RNAdeg)
sampleNames(data) = targets$Name
data.PLM <- fitPLM(data)
RNAdeg.data <- AffyRNAdeg(data)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNAdeg.data <- AffyRNAdeg(data)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNAdeg.gr <- AffyRNAdeg(data.ground)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data.ground),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNAdeg.fl <- AffyRNAdeg(data.flight)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data.flight),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNAdeg.1Gfl <- AffyRNAdeg(data.1G_flight)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data.1G_flight),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNAdeg.data <- AffyRNAdeg(data)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNAdeg <- AffyRNAdeg(data.ground)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data.ground),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNAdeg <- AffyRNAdeg(data.flight)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data.flight),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNAdeg <- AffyRNAdeg(data.1G_flight)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data.1G_flight),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNAdeg.data <- AffyRNAdeg(data)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNAdeg <- AffyRNAdeg(data)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
RNADegSummary <- summaryAffyRNAdeg(RNAdeg)
write.csv(RNADegSummary, file="RNADegSummary.csv")
RLE(data.PLM, main="RLE Plot", col=colors)
legend("bottomleft", sampleNames(data),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
NUSE(data.PLM, main="NUSE Plot",col=colors)
legend("topleft", sampleNames(data),lty=1,col=c(2,3,4,5,6,7),lwd=2, cex=0.5, ncol = 4)
facs <- targets[,c(1,3)]
facs = paste(facs[,2], sep="")
f = factor(facs)
design = model.matrix(~0+f)
colnames(design) = levels(f)
design
?makeContrasts
cont.matrix = makeContrasts(GroundvsCenttrifuge = 1g_ground_control-1g_in-flight_centrifuge, levels=design)
targets <- read.csv(file="targets.csv", stringsAsFactors=FALSE)
facs <- targets[,c(1,3)]
facs = paste(facs[,2], sep="")
f = factor(facs)
design = model.matrix(~0+f)
colnames(design) = levels(f)
design
cont.matrix = makeContrasts(GroundvsCenttrifuge = Ground_Control-Inflight_Centrifuge, levels=design)
cont.matrix.2 = makeContrasts(GroundvsMicrogravity = Ground_Control-Space_Flight_Microgravity, levels=design)
cont.matrix.1 = makeContrasts(GroundvsCenttrifuge = Ground_Control-Inflight_Centrifuge, levels=design)
cont.matrix.2 = makeContrasts(GroundvsMicrogravity = Ground_Control-Space_Flight_Microgravity, levels=design)
cont.matrix.3 = makeContrasts(CentrifugevsMicrogravity = Inflight_Centrifuge-Space_Flight_Microgravity, levels=design)
cont.matrix.1
cont.matrix.2
cont.matrix.3
setwd("C:/Users/richardbarker/Google Drive/R_&_Stats/Raw_microarray_data/E-MTAB-2518_Shenzhou8_CEL/E-MTAB-2518.raw.1")
?limFit
?lmFit
AEsetnorm <- affy::rma(data)
fit = lmFit(AEsetnorm, design)
fit2-1 = contrasts.fit(fit, cont.matrix.1)
fit2.1 = contrasts.fit(fit, cont.matrix.1)
fit = lmFit(AEsetnorm, design)
fit2.1 = contrasts.fit(fit, cont.matrix.1)
fit2.1 = eBayes(fit2.1)
res1 = topTable(fit2.1, coef = "1G_FlightvsGround Control", adjust = "BH", number = Inf)
fit2.2 = contrasts.fit(fit, cont.matrix.2)
fit2.2 = eBayes(fit2.2)
res2 = topTable(fit2.2, coef = "FlightvsGround Control", adjust = "BH", number = Inf)
fit2.3 = contrasts.fit(fit, cont.matrix.3)
fit2.3 = eBayes(fit2.3)
res3 = topTable(fit2.3, coef = "1G_FlightvsFlight", adjust = "BH", number = Inf)
fit = lmFit(AEsetnorm, design)
fit2.1 = contrasts.fit(fit, cont.matrix.1)
fit2.1 = eBayes(fit2.1)
res1 = topTable(fit2.1, coef = "1G_FlightvsGround Control", adjust = "BH", number = Inf)
res1 = topTable(fit2.1, coef = "1G_FlightvsGround Control", adjust = "BH")
?toptable
fit2.1
res1 = topTable(fit2.1, coef = "1G_FlightvsGround Control", adjust = "BH", number = Inf)
?toptable
fit2.1
fit
res1 = topTable(fit2.1, coef = "1G_FlightvsGround Control", adjust = "BH", number = Inf)
library("affy")
library("limma")
library("oligo")
library("affyPLM")
library("annotate")
library("dplyr")
library("GO.db")
library("ggplot2")
library("ggrepel")
setwd("C:/Users/richardbarker/Google Drive/R & Stats/Raw microarray data/E-GEOD-2538_chitin microarray_CEL/E-GEOD-2538")
setwd("C:\Users\richardbarker\Google Drive\R_&_Stats\Raw_microarray_data\E-GEOD-2538_chitin microarray_CEL\E-GEOD-2538")
setwd("C:/Users/richardbarker/Google Drive/R_&_Stats/Raw_microarray_data/E-GEOD-2538_chitin microarray_CEL/E-GEOD-2538")
library("affy")
library("limma")
library("oligo")
library("affyPLM")
library("annotate")
library("dplyr")
library("GO.db")
library("ggplot2")
library("ggrepel")
setwd("C:/Users/richardbarker/Google Drive/R_&_Stats/Raw microarray data/E-MTAB-2518_Shenzhou8_CEL/E-MTAB-2518.raw.1")
setwd("C:/Users/richardbarker/Google Drive/R_&_Stats/Raw_microarray_data/E-MTAB-2518_Shenzhou8_CEL/E-MTAB-2518.raw.1")
getwd()
data <- ReadAffy()
sampleNames(data)
AEsetnorm <- affy::rma(data)
for (i in 1:length(sampleNames(data)))
{name = paste("MAplotnorm",i,".jpg",sep="")
jpeg(name)
oligo::MAplot(AEsetnorm,which=i)
dev.off()}
targets <- read.csv(file="targets.csv", stringsAsFactors=FALSE)
data.ground <- data[,c(5,6)]
sampleNames(data.ground) = targets$Name[c(5,6)] #####
data.flight<- data[,c(1,2)]
sampleNames(data.flight) = targets$Name[c(1,2)]#####
data.1G_flight<- data[,c(3,4)]
sampleNames(data.1G_flight) = targets$Name[c(3,4)]######
data.ground.PLM <- fitPLM(data.ground)
data.flight.PLM <- fitPLM(data.flight)
data.1G_flight.PLM <- fitPLM(data.1G_flight)
RNAdeg <- AffyRNAdeg(data)
colors <- palette(rainbow(12))
plotAffyRNAdeg(RNAdeg, col=colors)
legend("topleft", sampleNames(data),lty=1,col=colors,lwd=2, cex=0.5, ncol = 4)
facs <- targets[,c(1,3)]
facs = paste(facs[,2], sep="")
f = factor(facs)
design = model.matrix(~0+f)
colnames(design) = levels(f)
cont.matrix.1 = makeContrasts(GroundvsCenttrifuge = Ground_Control-Inflight_Centrifuge, levels=design) #####
cont.matrix.2 = makeContrasts(GroundvsMicrogravity = Ground_Control-Space_Flight_Microgravity, levels=design) ######
cont.matrix.3 = makeContrasts(CentrifugevsMicrogravity = Inflight_Centrifuge-Space_Flight_Microgravity, levels=design) ######
fit = lmFit(AEsetnorm, design)
fit2.1 = contrasts.fit(fit, cont.matrix.1)
fit2.1 = eBayes(fit2.1)
res1 = topTable(fit2.1, coef = "1G_FlightvsGround Control", adjust = "BH", number = Inf)
AEsetnorm
fit = lmFit(AEsetnorm, design)
fit2.1 = contrasts.fit(fit, cont.matrix.1)
fit2.1 = eBayes(fit2.1)
res1 = topTable(fit2.1, coef = "1G_FlightvsGround Control", adjust = "BH", number = Inf)
fit
res1 = topTable(fit2.1, coef = "1G_FlightvsGroundControl", adjust = "BH", number = Inf)
res1 = topTable(fit2.1, coef = "FlightvsGroundControl", adjust = "BH", number = Inf)
fit$coefficients
res1 = topTable(fit2.1, coef = "FlightvsGroundControl", adjust = "BH", number = Inf)
head(fit$coefficients)
head(fit$coefficients[,coef])
fit$coefficients[,coef]
head(fit$coefficients[,3])
fit2.1
?toptable
fit = lmFit(AEsetnorm, design)
fit2.1 = contrasts.fit(fit, cont.matrix.1)
fit2.1 = eBayes(fit2.1)
res1 = topTable(fit2.1, coef = "GroundvsCenttrifuge", adjust = "BH", number = Inf)
fit2.2 = contrasts.fit(fit, cont.matrix.2)
fit2.2 = eBayes(fit2.2)
res2 = topTable(fit2.2, coef = "GroundvsMicrogravity", adjust = "BH", number = Inf)
fit2.3 = contrasts.fit(fit, cont.matrix.3)
fit2.3 = eBayes(fit2.3)
res3 = topTable(fit2.3, coef = "CentrifugevsMicrogravity", adjust = "BH", number = Inf)
res$threshold = as.factor(abs(res$logFC) > 2 & res$adj.P.Val < 0.05)
res1$threshold = as.factor(abs(res$logFC) > 2 & res$adj.P.Val < 0.05)
res1$threshold = as.factor(abs(res1$logFC) > 2 & res1$adj.P.Val < 0.05)
res2$threshold = as.factor(abs(res2$logFC) > 2 & res2$adj.P.Val < 0.05)
res3$threshold = as.factor(abs(res3$logFC) > 2 & res3$adj.P.Val < 0.05)
source("https://bioconductor.org/biocLite.R")
biocLite("ath1121501.db ")
library("org.At.tair.db")
library("GO.db")
TAIR_Link <- read.table(
"https://www.arabidopsis.org/download_files/Genes/TAIR10_genome_release/TAIR10_NCBI_mapping_files/TAIR10_NCBI_GENEID_mapping",
sep="\t", header=FALSE, col.names= c("EntrezID", "LocusID"))
gene.ID <- mget(rownames(res),ath1121501ACCNUM, ifnotfound = NA)
ID <- sapply(gene.ID, paste, collapse=",")
res$LocusID <- ID
gene.ID <- mget(rownames(res1),ath1121501ACCNUM, ifnotfound = NA)
?mget
rownames(res1)
source("https://bioconductor.org/biocLite.R")
biocLite("ath1121501.db")
library("ath1121501.db")
version
source("https://bioconductor.org/biocLite.R")
biocLite("ath1121501.db")
library("ath1121501.db")
biocLite("BiocUpgrade")
version
sessionInfo()
